[project]
name = "py-stock"
version = "1.0.0"
description = "株式投資の投資タイミングの見極めをPython x Claude Code x MCPでやってみる試み"
readme = "README.md"
requires-python = ">=3.9"
license = {text = "MIT"}
authors = [
    {name = "ryosuke-horie", email = "noreply@example.com"}
]
keywords = ["stock", "trading", "technical-analysis", "mcp", "streamlit"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Financial and Insurance Industry",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Office/Business :: Financial :: Investment",
]

dependencies = [
    # 株価データ取得
    "yfinance>=0.2.18",
    "pandas>=1.5.0",
    "numpy>=1.24.0",
    "scipy>=1.11.0",  # サポレジ検出用
    
    # 機械学習・分析
    "scikit-learn>=1.3.0",  # パターン分析・クラスタリング用
    
    # データベース・キャッシュ
    "sqlalchemy>=2.0.0",
    
    # 日時処理
    "python-dateutil>=2.8.2",
    "pytz>=2023.3",
    
    # 設定管理
    "python-dotenv>=1.0.0",
    
    # ログ管理
    "loguru>=0.7.0",
    
    # エラーハンドリング・リトライ
    "tenacity>=8.2.0",
    "requests>=2.31.0",
    
    # スケジューリング
    "schedule>=1.2.0",
    "APScheduler>=3.10.0",
    
    # データバリデーション
    "pydantic>=2.0.0",
]

[project.optional-dependencies]
dashboard = [
    "streamlit>=1.28.0",
    "plotly>=5.17.0",
    "matplotlib>=3.7.0",  # pandas background_gradient用
]

dev = [
    "pytest>=8.4.0",
    "pytest-cov>=4.1.0",
    "pytest-mock>=3.11.0",
    "pytest-xdist>=3.5.0",
    "pytest-asyncio>=0.21.0",
    "pytest-timeout>=2.2.0",
    "black>=23.0.0",
    "flake8>=6.0.0",
    "mypy>=1.5.0",
]

all = [
    "py-stock[dashboard,dev]"
]

[project.scripts]
py-stock = "main:main"

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.hatch.build.targets.wheel]
packages = ["src"]

[tool.uv]
dev-dependencies = [
    "pytest>=8.4.0",
    "pytest-cov>=4.1.0",
    "pytest-mock>=3.11.0",
    "pytest-xdist>=3.5.0",
    "pytest-asyncio>=0.21.0",
    "pytest-timeout>=2.2.0",
    "black>=23.0.0",
    "flake8>=6.0.0",
    "mypy>=1.5.0",
]

[tool.black]
line-length = 88
target-version = ['py39']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.mypy]
python_version = "3.9"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

# カバレッジ設定
[tool.coverage.run]
source = ["src"]
branch = true
omit = [
    "*/tests/*",
    "*/.venv/*", 
    "*/migrations/*",
    # デモ・サンプルファイル除外
    "src/examples/*",
    # 実行スクリプト除外
    "main.py",
    # ユーティリティスクリプト除外
    "*/scripts/*",
    "*/demos/*",
    # 設定ファイル除外（必要に応じて）
    # "*/config/settings.py",
]

[tool.coverage.report]
exclude_also = [
    "def __repr__",
    "if self\\.debug",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if False:",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
    "@(abc\\.)?abstractmethod",
    # ログ設定関連の除外
    "logger\\.(debug|info|warning|error|critical)",
    # プラットフォーム固有コード除外  
    "pragma: no cover",
    # デバッグ専用コード除外
    "def debug_",
    # 例外処理のパス句除外
    "pass",
]
show_missing = true
skip_covered = false
fail_under = 80  # 現在の目標値: 80%
precision = 2

[tool.coverage.html]
directory = "htmlcov"
skip_covered = false
show_contexts = false

[tool.coverage.xml]
output = "coverage.xml"

[tool.pytest.ini_options]
minversion = "8.4"
addopts = [
    "--import-mode=importlib",
    "--strict-markers",
    "--strict-config",
    "-ra",
    "--cov=src",
    "--cov-branch",
    "--cov-report=term-missing",
    "--cov-report=html:htmlcov",
    "--cov-report=xml",
    "--cov-fail-under=80",
]
testpaths = ["tests"]
pythonpath = ["src"]
filterwarnings = [
    "error",
    "ignore::UserWarning",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
    "e2e: marks tests as end-to-end tests",
]
asyncio_default_fixture_loop_scope = "function"

[dependency-groups]
dashboard = [
    "plotly>=6.1.1",
    "streamlit>=1.45.1",
    "matplotlib>=3.7.0",  # pandas background_gradient用
]
