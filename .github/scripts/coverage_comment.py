#!/usr/bin/env python3
"""
カバレッジレポートをPRコメントに投稿するスクリプト
"""

import json
import os
import sys
import xml.etree.ElementTree as ET
from typing import Dict, List, Tuple
import requests


def load_coverage_data() -> Tuple[float, float, int, int, List[Tuple[str, float]]]:
    """カバレッジデータを読み込んで返す"""
    # coverage.jsonからデータを読み込み
    try:
        with open('coverage.json', 'r') as f:
            coverage_data = json.load(f)
    except FileNotFoundError:
        print("Error: coverage.json not found")
        sys.exit(1)
    
    # 全体カバレッジ
    total_coverage = coverage_data['totals']['percent_covered']
    
    # ブランチカバレッジをJSONから計算
    totals = coverage_data['totals']
    if totals['num_branches'] > 0:
        branch_coverage = (totals['covered_branches'] / totals['num_branches']) * 100
    else:
        branch_coverage = 100.0  # ブランチが存在しない場合は100%とする
    
    # 未カバー行数
    missing_lines = coverage_data['totals']['missing_lines']
    total_lines = coverage_data['totals']['num_statements']
    
    # 高カバレッジファイル（90%以上）を抽出
    high_coverage_files = []
    for file_path, file_data in coverage_data['files'].items():
        coverage_percent = file_data['summary']['percent_covered']
        if coverage_percent >= 90.0:
            # src/以降のパスのみを表示
            display_path = file_path
            if file_path.startswith('src/'):
                display_path = file_path
            high_coverage_files.append((display_path, coverage_percent))
    
    # カバレッジ順にソート
    high_coverage_files.sort(key=lambda x: x[1], reverse=True)
    
    return total_coverage, branch_coverage, missing_lines, total_lines, high_coverage_files


def generate_comment(total_coverage: float, branch_coverage: float, 
                    missing_lines: int, total_lines: int, 
                    high_coverage_files: List[Tuple[str, float]]) -> str:
    """PRコメント用のMarkdownを生成"""
    
    # カバレッジ状態の判定
    coverage_status = "✅" if total_coverage >= 80.0 else "❌"
    threshold_text = "Target met" if total_coverage >= 80.0 else "Target not met"
    
    comment = f"""## 📊 Test Coverage Report

**Overall Coverage:** {total_coverage:.2f}% {coverage_status}
**Branch Coverage:** {branch_coverage:.2f}%
**Missing Lines:** {missing_lines:,}

### High Coverage Files (90%+)
"""
    
    # 高カバレッジファイルのリスト（最大10件）
    if high_coverage_files:
        for file_path, coverage in high_coverage_files[:10]:
            comment += f"- `{file_path}`: {coverage:.2f}%\n"
        
        if len(high_coverage_files) > 10:
            comment += f"- ... and {len(high_coverage_files) - 10} more files\n"
    else:
        comment += "- No files with 90%+ coverage\n"
    
    comment += f"""
### Coverage Details
- **{threshold_text}:** {coverage_status} 80% threshold {'exceeded' if total_coverage >= 80.0 else 'not met'}
- **Total lines:** {total_lines:,}
- **Covered lines:** {total_lines - missing_lines:,}

*Coverage report generated by pytest-cov*
"""
    
    return comment


def post_pr_comment(comment: str) -> None:
    """PRにコメントを投稿する"""
    
    # 環境変数から必要な情報を取得
    github_token = os.environ.get('GITHUB_TOKEN')
    github_repository = os.environ.get('GITHUB_REPOSITORY')
    pr_number = os.environ.get('PR_NUMBER')
    
    if not all([github_token, github_repository, pr_number]):
        print("Error: Missing required environment variables")
        print(f"GITHUB_TOKEN: {'SET' if github_token else 'NOT SET'}")
        print(f"GITHUB_REPOSITORY: {github_repository or 'NOT SET'}")
        print(f"PR_NUMBER: {pr_number or 'NOT SET'}")
        sys.exit(1)
    
    # 既存のコメントを検索して更新するか新規投稿するかを判定
    api_url = f"https://api.github.com/repos/{github_repository}/issues/{pr_number}/comments"
    headers = {
        'Authorization': f'token {github_token}',
        'Accept': 'application/vnd.github.v3+json'
    }
    
    # 既存のコメントを検索
    response = requests.get(api_url, headers=headers)
    if response.status_code == 200:
        comments = response.json()
        coverage_comment_id = None
        
        for comment_data in comments:
            if "📊 Test Coverage Report" in comment_data['body']:
                coverage_comment_id = comment_data['id']
                break
        
        # 既存のコメントがある場合は更新
        if coverage_comment_id:
            update_url = f"https://api.github.com/repos/{github_repository}/issues/comments/{coverage_comment_id}"
            response = requests.patch(update_url, 
                                    headers=headers, 
                                    json={'body': comment})
            if response.status_code == 200:
                print("✅ Coverage comment updated successfully")
                return
            else:
                print(f"❌ Failed to update comment: {response.status_code}")
                print(response.text)
    
    # 新規コメントを投稿
    response = requests.post(api_url, 
                           headers=headers, 
                           json={'body': comment})
    
    if response.status_code == 201:
        print("✅ Coverage comment posted successfully")
    else:
        print(f"❌ Failed to post comment: {response.status_code}")
        print(response.text)
        sys.exit(1)


def main():
    """メイン処理"""
    
    # カバレッジデータを読み込み
    total_coverage, branch_coverage, missing_lines, total_lines, high_coverage_files = load_coverage_data()
    
    # コメントを生成
    comment = generate_comment(total_coverage, branch_coverage, missing_lines, total_lines, high_coverage_files)
    
    # デバッグ用: コメント内容を表示
    print("Generated comment:")
    print("=" * 50)
    print(comment)
    print("=" * 50)
    
    # PRコメントに投稿
    post_pr_comment(comment)


if __name__ == "__main__":
    main()